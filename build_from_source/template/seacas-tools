#!/bin/bash
#############
## Specifics
##
DEP=(modules cmake gcc)
PACKAGE="seacas"

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='false'
EXTRACT='false'
CONFIGURE='false'
BUILD='false'
INSTALL='false'

pre_run() {
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/init/bash"
    module load advanced_modules autotools cmake gcc

    if [ -d "$PACKAGES_DIR/$PACKAGE" ]; then rm -rf "$PACKAGES_DIR/$PACKAGE"; fi
    cd $PACKAGES_DIR
    git clone https://github.com/gsjaardema/seacas.git $PACKAGE
    cd $PACKAGE; export ACCESS=`pwd`

    # Working commit at time of writing
    git checkout 58efc0488988f0fff1dcc5200a35e9ffc1447707

    # Apply curl patch (all machines have curl...)
    git remote add temp_ https://github.com/milljm/seacas.git
    git fetch temp_
    if [ $? -ne 0 ]; then echo "Failure in fetching patch information."; cleanup 1; fi
    git merge temp_/use_our_server
    if [ $? -ne 0 ]; then echo "Failure to merge patching branch."; cleanup 1; fi

    # Run dependency installer
    ./install-tpl.sh
    if [ $? -ne 0 ]; then echo "Failure while running installer-tpl.sh"; cleanup 1; fi

    # Build seacas-tools
    mkdir "$ACCESS/build"; cd "$ACCESS/build"
    ../cmake-config
    if [ $? -ne 0 ]; then echo "Failure while running cmake config for seacas-tools"; cleanup 1; fi
    make -j $MOOSE_JOBS
    if [ $? -ne 0 ]; then echo "Failure while building seacas-tools"; cleanup 1; fi
    make install
    if [ $? -ne 0 ]; then echo "Failure while installing seacas-tools"; cleanup 1; fi
}
post_run() {
    cat <<EOF >> "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose-tools"

# SEACAS (insternally used)
if { [uname sysname] != "Darwin" } {
  prepend-path  LD_LIBRARY_PATH  "\$BASE_PATH/seacas/lib"
}
prepend-path    PATH            "\$BASE_PATH/seacas/bin"
prepend-path    MANPATH         "\$BASE_PATH/seacas/share/man"
setenv          ACCESS          "\$BASE_PATH/seacas"

EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
