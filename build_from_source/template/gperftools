#!/bin/bash
#############
## Specifics
##
DEP=(modules gcc llvm libunwind graphviz golang)
PACKAGE="<GPERFTOOLS>"

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/<GPERFTOOLS>.tar.gz'
EXTRACT='<GPERFTOOLS>.tar.gz'
CONFIGURE='false'
BUILD='true'
INSTALL='true'

pre_run() {
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/init/bash"
    if [ `uname` = "Darwin" ]; then
        module load advanced_modules autotools clang moose-tools golang
        ./configure --prefix="$PACKAGES_DIR/$PACKAGE" --enable-libunwind
    else
        module load advanced_modules autotools gcc moose-tools golang
        PATH="$PACKAGES_DIR/<LIBUNWIND>/bin:$PATH" LIBRARY_PATH="$PACKAGES_DIR/<LIBUNWIND>/lib:$LIBRARY_PATH" LD_LIBRARY_PATH="$PACKAGES_DIR/<LIBUNWIND>/lib:$LD_LIBRARY_PATH" CPATH="$PACKAGES_DIR/<LIBUNWIND>/include" CPPFLAGS="-I$PACKAGES_DIR/<LIBUNWIND>/include" CFLAGS="-I$PACKAGES_DIR/<LIBUNWIND>/include" LDFLAGS="-L$PACKAGES_DIR/<LIBUNWIND>/lib" ./configure --prefix="$PACKAGES_DIR/$PACKAGE" --enable-libunwind
    fi
}

post_run() {
    cd "$1"
    ### Build the better pprof tool from google/pprof ###
    export GOPATH="$PACKAGES_DIR/<GPERFTOOLS>"
    # Remove unwanted pprof
    mv "$GOPATH/bin/pprof" "$GOPATH/bin/original_pprof"
    # Build/Install pprof from google
    go get -u github.com/google/pprof
    if [ "$?" != "0" ]; then echo "failed to build pprof"; cleanup 1; fi

    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<GPERFTOOLS>"
#%Module1.0#####################################################################
##
## gperf-tools modulefile
##
##
set          BASE_PATH         "$PACKAGES_DIR"
prepend-path PATH              "\$BASE_PATH/<GPERFTOOLS>/bin"
prepend-path MANPATH           "\$BASE_PATH/<GPERFTOOLS>/share/man"
prepend-path LIBRARY_PATH      "\$BASE_PATH/<GPERFTOOLS>/lib"
prepend-path CPATH             "\$BASE_PATH/<GPERFTOOLS>/include"
prepend-path PKG_CONFIG_PATH   "\$BASE_PATH/<GPERFTOOLS>/lib/pkgconfig"
setenv       GPERF_DIR         "\$BASE_PATH/<GPERFTOOLS>"

if { [uname sysname] != "Darwin" } {
  prepend-path LD_LIBRARY_PATH   "\$BASE_PATH/<GPERFTOOLS>/lib:\$BASE_PATH/<LIBUNWIND>/lib"
  prepend-path MANPATH           "\$BASE_PATH/<LIBUNWIND>/share/man"
  prepend-path LIBRARY_PATH      "\$BASE_PATH/<LIBUNWIND>/lib"
  prepend-path CPATH             "\$BASE_PATH/<LIBUNWIND>/include"
  prepend-path PKG_CONFIG_PATH   "\$BASE_PATH/<LIBUNWIND>/lib/pkgconfig"
} else {
  # obtain pkg-config
  module load moose-tools
}

EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
