#!/bin/bash
#############
## Specifics
##
DEP=(modules automake autoconf libtool)
PACKAGE="intel-gcc"
NO_CCACHE='true'

#####
# Set the operating system allowed to build this module
#
ARCH=(Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/<INTEL_GCC>.tar.gz'
EXTRACT='<INTEL_GCC>.tar.gz'
CONFIGURE='false'
BUILD='true'
INSTALL='true'

pre_run() {
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/<MODULES>/init/bash"
    module load advanced_modules autotools
    mkdir ../gcc_build; cd ../gcc_build
    CONFIGURE="../<INTEL_GCC>/configure --prefix=${PACKAGES_DIR}_intel/<INTEL_GCC> --disable-multilib --enable-languages=c,c++,fortran --enable-checking=release --enable-host-shared --with-pic"
}

post_run() {
    mkdir -p "${PACKAGES_DIR}_intel/modulefiles"
    cat <<EOF > "${PACKAGES_DIR}_intel/modulefiles/intel-gcc"
#%Module1.0#####################################################################
##
## Internal Intel <INTEL_GCC> modulefile
## Not to be used by itself
##
set          BASE_PATH          "${PACKAGES_DIR}_intel"
set          INTEL_GCC_PATH     "\$BASE_PATH/<INTEL_GCC>"
prepend-path LD_LIBRARY_PATH    "\$INTEL_GCC_PATH/lib64:\$INTEL_GCC_PATH/lib/gcc/x86_64-unknown-linux-gnu/<INTEL_GCC_VERSION>:\$INTEL_GCC_PATH/libexec/gcc/x86_64-unknown-linux-gnu/<INTEL_GCC_VERSION>"
prepend-path PATH               "\$INTEL_GCC_PATH/bin"

EOF
    cd "${PACKAGES_DIR}_intel/<INTEL_GCC>"
    for sfile in `find . -type f -name "*.la"`; do
        if [ `grep -c "$src_temp" $sfile` -ge 1 ]; then
            echo 'editing file: '$sfile
            perl -pi -e "s/-L.\S*build\S*[^'\s+]//g" $sfile
        fi
    done
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
WITH_INTEL=<WITH_INTEL>
source "$RELATIVE_DIR/functions" $@
