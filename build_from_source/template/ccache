#!/bin/bash
#############
## Specifics
##
DEP=(modules)
PACKAGE="<CCACHE>"

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/<CCACHE>.tar.gz'
EXTRACT='<CCACHE>.tar.gz'
CONFIGURE="true"
BUILD='true'
INSTALL='true'

pre_run() {
    return
}
post_run() {
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/ccache"
#%Module1.0#####################################################################
##
## <CCACHE> modulefile
##
##
##
set              BASE_PATH        "$PACKAGES_DIR"

prepend-path     PATH               "\$BASE_PATH/<CCACHE>/bin"
prepend-path     MANPATH            "\$BASE_PATH/<CCACHE>/share/man"
setenv           CCACHE_SLOPPINESS  "time_macros"

if { [ info exists ::env(CC) ] } {
  set _CC [getenv CC]
  setenv CC "ccache \$_CC"
} else {
  setenv CC "ccache"
}

if { [ info exists ::env(CXX) ] } {
  set _CXX [getenv CXX]
  setenv CXX "ccache \$_CXX"
} else {
  setenv CXX "ccache"
}
EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
