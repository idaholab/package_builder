#!/bin/bash
#############
## Specifics
##
DEP=(tcl moose_profile)
PACKAGE='modules'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/modules-<MODULES>.tar.gz'
EXTRACT='modules-<MODULES>.tar.gz'
CONFIGURE='false'
BUILD='true'
INSTALL='true'

pre_run() {
    if [ -d "$PACKAGES_DIR/Modules" ]; then
	rm -rf "$PACKAGES_DIR/Modules"
    fi
    if [ `uname` = "Darwin" ]; then
        CONFIGURE="./configure --prefix=$PACKAGES_DIR --with-tcl=$PACKAGES_DIR/<TCL>/lib"
    else
        CONFIGURE="CPPFLAGS=-DUSE_INTERP_ERRORLINE ./configure --prefix=$PACKAGES_DIR"
    fi
}
post_run() {
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/adv_modules"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/openmpi_clang"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/openmpi_gcc"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/mpich_clang"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/mpich_gcc"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/civet"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/civet"
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/civet/.civet"
#%Module1.0#####################################################################
##
## Civet support modules
##
##
set          BASE_PATH  "$PACKAGES_DIR"
prepend-path MODULEPATH "\$BASE_PATH/Modules/<MODULES>/civet"
EOF
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/advanced_modules"
#%Module1.0#####################################################################
##
## MOOSE extended modules
##
##
set          BASE_PATH  "$PACKAGES_DIR"
prepend-path MODULEPATH "\$BASE_PATH/Modules/<MODULES>/adv_modules"
EOF
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/adv_modules/petsc-head"
#%Module1.0#####################################################################
##
## PETSC head (run $PACKAGES_DIR/build_PETSc-head to obtain/install latest PETSc) modulefile
##
##
##
proc ModulesHelp { } {
        puts stderr "\n\tThis is the PETSc head module. You must run:"
        puts stderr "\n\t\t/opt/moose/build_PETSc-head"
        puts stderr "\n\tThat script builds everything you need. You"
        puts stderr "\tonly need to run that script once, or as"
        puts stderr "\toften as you like (script downloads nightly"
        puts stderr "\tsnapshot).\n"
}

# If HOME is set, use that in an attempt to find petsc_head/petsc
if { [ info exists ::env(HOME) ] } {
  eval set [ array get env HOME ]
  if [ file isdirectory "\$HOME/petsc_head/petsc" ] {
    # Based on uname, we determine which compiler to use
    if { [uname sysname] == "Darwin"} {
      module load mpich-clang
    } else {
      module load mpich-gcc
    }
    setenv PETSC_DIR "\$HOME/petsc_head/petsc"
  } else {
      puts stderr "\n\tDirectory: \$HOME/petsc_head/petsc"
      puts stderr "\tnot detected. You must first run:"
      puts stderr "\n\t\t/opt/moose/build_PETSc-head"
      puts stderr "\n\tThat script builds everything you need. You"
      puts stderr "\tonly need to run that script once, or as"
      puts stderr "\toften as you like (script downloads nightly"
      puts stderr "\tsnapshot).\n"
      break
  }
}
EOF
    # Create .intel module so ccache works
    cd "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose"
    ln -s ../null .intel
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
