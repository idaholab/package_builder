#!/bin/bash
#############
## Specifics
##
DEP=(tcl moose_profile)
PACKAGE='modules'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/modules-<MODULES>.tar.gz'
EXTRACT='modules-<MODULES>.tar.gz'
CONFIGURE='false'
BUILD='true'
INSTALL='true'

pre_run() {
    if [ -d "$PACKAGES_DIR/Modules" ]; then
	rm -rf "$PACKAGES_DIR/Modules"
    fi
    if [ `uname` = "Darwin" ]; then
        CONFIGURE="./configure --prefix=$PACKAGES_DIR --with-tcl=$PACKAGES_DIR/<TCL>/lib"
    else
        CONFIGURE="CPPFLAGS=-DUSE_INTERP_ERRORLINE ./configure --prefix=$PACKAGES_DIR"
    fi
}
post_run() {
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/adv_modules"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/mpich_clang"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/mpich_gcc"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/civet"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose"
    mkdir -p "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/civet"
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/civet/.civet"
#%Module1.0#####################################################################
##
## Civet support modules
##
##
set          BASE_PATH  "$PACKAGES_DIR"
prepend-path MODULEPATH "\$BASE_PATH/Modules/<MODULES>/civet"
EOF
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/advanced_modules"
#%Module1.0#####################################################################
##
## MOOSE extended modules
##
##
set          BASE_PATH  "$PACKAGES_DIR"
prepend-path MODULEPATH "\$BASE_PATH/Modules/<MODULES>/adv_modules"
EOF
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose-dev-clang"
#%Module1.0#####################################################################
##
## Clang MOOSE DEV Module
##
##
##
conflict moose-dev-clang-alt moose-dev-gcc moose-dev-gcc-alt
module load moose/.<MPICH>_<CLANG>
module load moose/.<PETSC_DEFAULT>_<MPICH>_<CLANG>-opt

# If MOOSE_DIR is set, help the user out by prepending the moose/python path
if { [ info exists ::env(MOOSE_DIR) ] } {
  eval set [ array get env MOOSE_DIR ]
  if [ file isdirectory "\$MOOSE_DIR/python" ] {
    prepend-path PYTHONPATH "\$MOOSE_DIR/python"
  }
}
EOF
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose-dev-gcc"
#%Module1.0#####################################################################
##
## GCC MOOSE DEV Module
##
##
##
conflict moose-dev-gcc-alt moose-dev-clang moose-dev-clang-alt
module load moose/.<MPICH>_<GCC>
module load moose/.<PETSC_DEFAULT>_<MPICH>_<GCC>-opt

# If MOOSE_DIR is set, help the user out by prepending the moose/python path
if { [ info exists ::env(MOOSE_DIR) ] } {
  eval set [ array get env MOOSE_DIR ]
  if [ file isdirectory "\$MOOSE_DIR/python" ] {
    prepend-path PYTHONPATH "\$MOOSE_DIR/python"
  }
}
EOF
    # Create .intel module so ccache works
    cd "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose"
    ln -s ../null .intel
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
