#!/bin/bash
#############
## Specifics
##
DEP=(common_files modules gcc llvm pkg-config)
PACKAGE='icecream'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD=(http://mooseframework.inl.gov/source_packages/libtool-2.4.6.tar.gz http://mooseframework.inl.gov/source_packages/lzo-2.09.tar.gz http://mooseframework.inl.gov/source_packages/libcap-ng-0.7.8.tar.gz http://mooseframework.inl.gov/source_packages/zstd-1.4.3.tar.gz http://mooseframework.inl.gov/source_packages/libarchive-3.4.0.tar.gz)
EXTRACT='false'
CONFIGURE="false"
BUILD='false'
INSTALL='false'

pre_run() {
    # Dependency packages that need to be built
    if [ `uname` = 'Darwin' ]; then
        ICECREAM_PACKAGES=(libtool-2.4.6.tar.gz lzo-2.09.tar.gz zstd-1.4.3.tar.gz libarchive-3.4.0.tar.gz)
    else
        ICECREAM_PACKAGES=(libtool-2.4.6.tar.gz lzo-2.09.tar.gz libcap-ng-0.7.8.tar.gz zstd-1.4.3.tar.gz libarchive-3.4.0.tar.gz)
    fi

    mkdir -p "$PACKAGES_DIR/$PACKAGE/contribs"
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/init/bash"
    module load advanced_modules autotools moose-tools

    for ICECREAM_PACKAGE in ${ICECREAM_PACKAGES[*]}; do
      target_dir=$(tar -tf "$DOWNLOAD_DIR/$ICECREAM_PACKAGE" | sed -e 's@/.*@@' | uniq)
      cd $1
      tar -xf "$DOWNLOAD_DIR/$ICECREAM_PACKAGE" -C .
      if [ $? -ne 0 ]; then echo 'Failed to extract '$ICECREAM_PACKAGE; cleanup 1; fi
      cd $target_dir
      if [ $? -ne 0 ]; then echo "Failed to enter source directory $1/$target_dir"; cleanup 1; fi
      if [ -f 'configure' ]; then
          ./configure --prefix="$PACKAGES_DIR/$PACKAGE/contribs/$target_dir"
          if [ $? -ne 0 ]; then echo 'Failed to configure Icecream pacakge: '$ICECREAM_PACKAGE; cleanup 1; fi
          make -j $MOOSE_JOBS
      else
          make prefix="$PACKAGES_DIR/$PACKAGE/contribs/$target_dir" -j $MOOSE_JOBS
      fi
      if [ $? -ne 0 ]; then echo 'Failed to build Icecream pacakge: '$ICECREAM_PACKAGE; cleanup 1; fi
      if [ -f 'configure' ]; then
          make install
      else
          make prefix="$PACKAGES_DIR/$PACKAGE/contribs/$target_dir" install
      fi
      if [ $? -ne 0 ]; then echo 'Failed to install Icecream pacakge: '$ICECREAM_PACKAGE; cleanup 1; fi
      if [ -d "$PACKAGES_DIR/$PACKAGE/contribs/$target_dir/lib/pkgconfig" ]; then
          export PKG_CONFIG_PATH="$PACKAGES_DIR/$PACKAGE/contribs/$target_dir/lib/pkgconfig:$PKG_CONFIG_PATH"
      fi
      if [ -d "$PACKAGES_DIR/$PACKAGE/contribs/$target_dir/lib64" ] && ! [ -d "$PACKAGES_DIR/$PACKAGE/contribs/$target_dir/lib" ]; then
          ln -s "$PACKAGES_DIR/$PACKAGE/contribs/$target_dir/lib64" "$PACKAGES_DIR/$PACKAGE/contribs/$target_dir/lib"
      fi
    done
}
post_run() {
    cd $1
    git clone https://github.com/icecc/icecream.git
    cd icecream
    git checkout 1.3
    PATH="$PACKAGES_DIR/$PACKAGE/contribs/libtool-2.4.6/bin:$PATH" ./autogen.sh
    if [ `uname` = 'Darwin' ]; then
        LDFLAGS="-L$PACKAGES_DIR/$PACKAGE/contribs/lzo-2.09/lib -llzo2 `pkg-config libzstd libarchive --libs`" CPPFLAGS="-I$PACKAGES_DIR/$PACKAGE/contribs/lzo-2.09/include `pkg-config libzstd libarchive --cflags`" CFLAGS="`pkg-config libzstd libarchive --cflags`" ./configure --prefix="$PACKAGES_DIR/$PACKAGE" --without-man
    else
        LD_LIBRARY_PATH="`pkg-config libzstd --variable=prefix`/lib:`pkg-config libzstd --variable=prefix`:$LD_LIBRARY_PATH" LDFLAGS="-L$PACKAGES_DIR/$PACKAGE/contribs/lzo-2.09/lib -llzo2 -L$PACKAGES_DIR/$PACKAGE/contribs/libcap-ng-0.7.8/lib -lcap-ng `pkg-config libzstd libarchive --libs`" CPPFLAGS="-I$PACKAGES_DIR/$PACKAGE/contribs/libcap-ng-0.7.8/include -I$PACKAGES_DIR/$PACKAGE/contribs/lzo-2.09/include `pkg-config libzstd libarchive --cflags`" CFLAGS="`pkg-config libzstd libarchive --cflags`" ./configure --prefix="$PACKAGES_DIR/$PACKAGE" --without-man
    fi

    if [ $? -ne 0 ]; then echo 'Failed to configure icecream'; cleanup 1; fi
    make -j $MOOSE_JOBS
    if [ $? -ne 0 ]; then echo 'Failed to build icecream'; cleanup 1; fi
    make install
    if [ $? -ne 0 ]; then echo 'Failed to install icecream'; cleanup 1; fi
    if [ `uname` = 'Darwin' ]; then
        PATH="$PACKAGES_DIR/icecream/bin:$PATH" icecc-create-env --clang "$PACKAGES_DIR/llvm-<LLVM>/bin/clang"
        if [ $? -ne 0 ]; then echo 'Failed to create LLVM Icecream payload'; cleanup 1; fi
        mv *.tar.gz "$PACKAGES_DIR/$PACKAGE/clang_<LLVM>.tar.gz"
    else
        PATH="$PACKAGES_DIR/icecream/bin:$PATH" icecc-create-env --clang "$PACKAGES_DIR/llvm-<LLVM>/bin/clang" "$PACKAGES_DIR/llvm-<LLVM>/bin/clang++"
        if [ $? -ne 0 ]; then echo 'Failed to create LLVM Icecream payload'; cleanup 1; fi
        mv *.tar.gz "$PACKAGES_DIR/$PACKAGE/clang_<LLVM>.tar.gz"
        PATH="$PACKAGES_DIR/icecream/bin:$PATH" icecc-create-env --gcc "$PACKAGES_DIR/<GCC>/bin/gcc" "$PACKAGES_DIR/<GCC>/bin/g++"
        if [ $? -ne 0 ]; then echo 'Failed to create GCC Icecream payload'; cleanup 1; fi
        mv *.tar.gz "$PACKAGES_DIR/$PACKAGE/<GCC>.tar.gz"
    fi
    cd "$PACKAGES_DIR/$PACKAGE/libexec/icecc/bin"
    ln -s "$PACKAGES_DIR/$PACKAGE/bin/icecc" clang
    ln -s "$PACKAGES_DIR/$PACKAGE/bin/icecc" clang++
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/icecream"
#%Module1.0#####################################################################
##
## ICECREAM Job Scheduler
##
##
##
set             BASE_PATH          "$PACKAGES_DIR"

proc ModulesHelp { } {
        puts stderr "\n\tThis is the ICECREAM cluster module."
        puts stderr "\n\tPlease go to\n\t http://icecream.inl.gov"
        puts stderr "\n\tfor more instructions.\n"
}

if {[is-loaded <CCACHE>]} {
  append-path  PATH           "\$BASE_PATH/$PACKAGE/bin"
  setenv       CCACHE_PREFIX  "icecc"
} else {
  prepend-path PATH           "\$BASE_PATH/$PACKAGE/libexec/icecc/bin:\$BASE_PATH/$PACKAGE/sbin:\$BASE_PATH/$PACKAGE/bin"
}

if {[is-loaded moose/.<GCC>] || [is-loaded <GCC>]} {
  setenv  ICECC_VERSION         "\$BASE_PATH/$PACKAGE/<GCC>.tar.gz"
}

## check for clang _after_ we have checked and possibly found gcc.
## as clang does require the gcc module to be loaded, but we want to use
## clang first (in our path)
if {[is-loaded moose/.<CLANG>] || [is-loaded <CLANG>]} {
  setenv  ICECC_VERSION         "\$BASE_PATH/$PACKAGE/clang_<LLVM>.tar.gz"
}
EOF

}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
