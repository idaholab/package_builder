#!/bin/bash
#############
## Specifics
##
DEP=(modules gcc)
PACKAGE='openmpi-gcc'
SERIAL=True

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.org/source_packages/<OPENMPI>.tar.gz'
EXTRACT='<OPENMPI>.tar.gz'
CONFIGURE="false"
BUILD='false'
INSTALL='true'

pre_run() {
    if [ -d $PACKAGES_DIR/openmpi/<OPENMPI>/gcc-opt ]; then
	rm -rf $PACKAGES_DIR/openmpi/<OPENMPI>/gcc-opt
    fi
    unset MODULEPATH
    source $PACKAGES_DIR/Modules/<MODULES>/init/bash
    module load advanced_modules gcc

    # Build and enter out-of-tree directory
    mkdir gcc-opt; cd gcc-opt

    # Configure
    ../configure --prefix=$PACKAGES_DIR/openmpi/<OPENMPI>/gcc-opt \
CC=gcc CXX=g++ FC=gfortran F77=gfortran \
CFLAGS='' CXXFLAGS='' FFLAGS='' FCFLAGS='' F77FLAGS=''
    if [ $? -ne 0 ]; then echo "Failed to configure $PACKAGE"; cleanup 1; fi

    # Make serially
    make -j 1
    if [ $? -ne 0 ]; then echo "Failed to make $1"; cleanup 1; fi

}
post_run() {
    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<OPENMPI>_gcc
#%Module1.0#####################################################################
##
## OpenMPI GCC
##
set BASE_PATH   $PACKAGES_DIR

conflict moose/.<MPICH>_clang moose/.<MPICH>_gcc moose/.<OPENMPI>_gcc openmpi_clang mpich_clang mpich_gcc
module load moose/.<GCC>

set             MPI_PATH           \$BASE_PATH/openmpi/<OPENMPI>/gcc-opt

if { [uname sysname] != "Darwin" } {
   prepend-path    LD_LIBRARY_PATH    \$MPI_PATH/lib
}

prepend-path    C_INCLUDE_PATH     \$MPI_PATH/include
prepend-path    CPLUS_INCLUDE_PATH \$MPI_PATH/include
prepend-path    FPATH              \$MPI_PATH/include
prepend-path    MANPATH            \$MPI_PATH/share/man

setenv CC       mpicc
setenv CXX      mpicxx
setenv F90      mpif90
setenv F77      mpif77
setenv FC       mpif90

setenv          MPI_HOME          \$MPI_PATH
prepend-path    PATH              \$MPI_PATH/bin

EOF
    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/adv_modules/openmpi-gcc
#%Module1.0#####################################################################
##
## OpenMPI GCC
##
set BASE_PATH   $PACKAGES_DIR

conflict moose/.<OPENMPI>_gcc moose/.<MPICH>_clang moose/.<MPICH>_gcc moose/.<OPENMPI>_gcc openmpi_clang mpich_clang mpich_gcc

if { ! [ is-loaded <GCC> ] } {
  module load moose/.<GCC>
}

set             MPI_PATH           \$BASE_PATH/openmpi/<OPENMPI>/gcc-opt

if { [uname sysname] != "Darwin" } {
   prepend-path    LD_LIBRARY_PATH    \$MPI_PATH/lib
}

prepend-path    C_INCLUDE_PATH     \$MPI_PATH/include
prepend-path    CPLUS_INCLUDE_PATH \$MPI_PATH/include
prepend-path    FPATH              \$MPI_PATH/include
prepend-path    MANPATH            \$MPI_PATH/share/man

setenv CC       mpicc
setenv CXX      mpicxx
setenv F90      mpif90
setenv F77      mpif77
setenv FC       mpif90

setenv          MPI_HOME          \$MPI_PATH
prepend-path    PATH              \$MPI_PATH/bin

append-path     MODULEPATH        \$BASE_PATH/Modules/<MODULES>/openmpi_gcc
EOF
    module load advanced_modules openmpi-gcc
    cd $MPI_HOME/lib
    for sfile in `find . -type f -name "*.la"`; do
	if [ `grep -c 'src_temp_' $sfile` -ge 1 ]; then
	    echo 'editing file: '$sfile
	    perl -pi -e "s/-L.\S*src_temp_\S*[^'\s+]//g" $sfile
	fi
    done
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
