#!/bin/bash
#############
## Specifics
##
DEP=(modules automake autoconf libtool)
PACKAGE="<GCC>"
NO_CCACHE='true'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/<GCC>.tar.gz'
EXTRACT='<GCC>.tar.gz'
CONFIGURE="false"
BUILD='true'
INSTALL='true'

patch_jit()
{
    if [ `uname` != 'Darwin' ]; then return; fi
    # Patch Darwin gcc for JIT linking issue: https://gcc.gnu.org/ml/jit/2015-q3/msg00147.html
    cat << 'EOF' > darwin-jit.patch
--- a/gcc/jit/Make-lang.in	2018-09-27 10:38:46.000000000 -0600
+++ b/gcc/jit/Make-lang.in	2018-09-27 10:39:39.000000000 -0600
@@ -85,8 +85,7 @@
 	     $(jit_OBJS) libbackend.a libcommon-target.a libcommon.a \
 	     $(CPPLIB) $(LIBDECNUMBER) $(LIBS) $(BACKENDLIBS) \
 	     $(EXTRA_GCC_OBJS) \
-	     -Wl,--version-script=$(srcdir)/jit/libgccjit.map \
-	     -Wl,-soname,$(LIBGCCJIT_SONAME)
+	     -Wl,-install_name,$(LIBGCCJIT_SONAME)
 
 $(LIBGCCJIT_SONAME_SYMLINK): $(LIBGCCJIT_FILENAME)
 	ln -sf $(LIBGCCJIT_FILENAME) $(LIBGCCJIT_SONAME_SYMLINK)
EOF
    patch -p1 < darwin-jit.patch
    if [ $? -ne 0 ]; then echo 'Failed to patch jit compiler'; cleanup 1; fi
}
patch_atomic() {
    if [ `uname` != 'Darwin' ]; then return; fi
    # Patch Darwin for XCode 10.2 __Atomic bug
    cat <<'EOF' > __atomic.patch
diff -r -u gcc-8.3.0/fixincludes/fixincl.x gcc-8.3.0-patch/fixincludes/fixincl.x
--- gcc-8.3.0/fixincludes/fixincl.x	2018-02-23 01:12:26.000000000 +0900
+++ gcc-8.3.0-patch/fixincludes/fixincl.x	2019-04-11 12:37:25.000000000 +0900
@@ -3222,6 +3222,44 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Darwin_Ucred__Atomic fix
+ */
+tSCC zDarwin_Ucred__AtomicName[] =
+     "darwin_ucred__Atomic";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zDarwin_Ucred__AtomicList[] =
+  "sys/ucred.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzDarwin_Ucred__AtomicMachs[] = {
+        "*-*-darwin18*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zDarwin_Ucred__AtomicSelect0[] =
+       "_Atomic";
+
+#define    DARWIN_UCRED__ATOMIC_TEST_CT  1
+static tTestDesc aDarwin_Ucred__AtomicTests[] = {
+  { TT_EGREP,    zDarwin_Ucred__AtomicSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Darwin_Ucred__Atomic
+ */
+static const char* apzDarwin_Ucred__AtomicPatch[] = {
+    "wrap",
+    "# define _Atomic volatile\n",
+    "# undef _Atomic\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Dec_Intern_Asm fix
  */
 tSCC zDec_Intern_AsmName[] =
@@ -10099,9 +10137,9 @@
  *
  *  List of all fixes
  */
-#define REGEX_COUNT          287
+#define REGEX_COUNT          288
 #define MACH_LIST_SIZE_LIMIT 187
-#define FIX_COUNT            249
+#define FIX_COUNT            250
 
 /*
  *  Enumerate the fixes
@@ -10183,6 +10221,7 @@
     DARWIN_STDINT_5_FIXIDX,
     DARWIN_STDINT_6_FIXIDX,
     DARWIN_STDINT_7_FIXIDX,
+    DARWIN_UCRED__ATOMIC_FIXIDX,
     DEC_INTERN_ASM_FIXIDX,
     DJGPP_WCHAR_H_FIXIDX,
     ECD_CURSOR_FIXIDX,
@@ -10739,6 +10778,11 @@
      DARWIN_STDINT_7_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aDarwin_Stdint_7Tests,   apzDarwin_Stdint_7Patch, 0 },
 
+  {  zDarwin_Ucred__AtomicName,    zDarwin_Ucred__AtomicList,
+     apzDarwin_Ucred__AtomicMachs,
+     DARWIN_UCRED__ATOMIC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aDarwin_Ucred__AtomicTests,   apzDarwin_Ucred__AtomicPatch, 0 },
+
   {  zDec_Intern_AsmName,    zDec_Intern_AsmList,
      apzDec_Intern_AsmMachs,
      DEC_INTERN_ASM_TEST_CT, FD_MACH_ONLY,
diff -r -u gcc-8.3.0/fixincludes/inclhack.def gcc-8.3.0-patch/fixincludes/inclhack.def
--- gcc-8.3.0/fixincludes/inclhack.def	2018-02-23 01:12:26.000000000 +0900
+++ gcc-8.3.0-patch/fixincludes/inclhack.def	2019-04-11 12:37:59.000000000 +0900
@@ -1592,6 +1592,19 @@
 		"#define UINTMAX_C(v) (v ## ULL)";
 };
 
+/*  XCode 10.2 <sys/ucred.h> uses the C _Atomic keyword in C++ code.
+*/
+fix = {
+    hackname  = darwin_ucred__Atomic;
+    mach      = "*-*-darwin18*";
+    files     = sys/ucred.h;
+    select    = "_Atomic";
+    c_fix     = wrap;
+    c_fix_arg = "# define _Atomic volatile\n";
+    c_fix_arg = "# undef _Atomic\n";
+    test_text = "_Atomic";
+};
+
 /*
  *  Fix <c_asm.h> on Digital UNIX V4.0:
  *  It contains a prototype for a DEC C internal asm() function,
EOF
    patch -p1 < __atomic.patch
    if [ $? -ne 0 ]; then echo 'Failed to patch __Atomic'; cleanup 1; fi
}

pre_run() {
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/<MODULES>/init/bash"
    module load advanced_modules autotools

    #### NOTE: We no longer allow the build system to run ./contrib/download_prerequisites
    # as it is prone to failure. The gcc-x.x.x.tar.gz will now contain all the
    # neccessary pre-requisites.

    if [ `uname` = 'Darwin' ] && [ `uname -r | cut -d. -f 1` = '18' ]; then
        CONFIGURE="../<GCC>/configure --prefix=$PACKAGES_DIR/<GCC> --disable-multilib --enable-languages=c,c++,fortran,jit --enable-checking=release --enable-host-shared --with-pic --with-system-zlib --disable-nls --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
    else
        CONFIGURE="../<GCC>/configure --prefix=$PACKAGES_DIR/<GCC> --disable-multilib --enable-languages=c,c++,fortran,jit --enable-checking=release --enable-host-shared --with-pic"
    fi
    patch_jit
    patch_atomic
    mkdir ../gcc_build; cd ../gcc_build

    # I've notice by the time we make it to this module (gcc), everything else is
    # on hold because everything else is requiring gcc to be completed.
    MAX=true
}

post_run() {
    unset MAX
    if [ `uname` = "Darwin" ]; then
        GCC_TOOLCHAIN_ARCH="x86_64-apple-darwin`uname -r`"
    else
        GCC_TOOLCHAIN_ARCH="x86_64-pc-linux-gnu"
    fi
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<GCC>"
#%Module1.0#####################################################################
##
## <GCC> modulefile
##
##
##
set          BASE_PATH          "$PACKAGES_DIR"
set          GCC_PATH           "\$BASE_PATH/<GCC>"

set GCC_LIB_PATHS "\$GCC_PATH/lib64:\$GCC_PATH/lib:\$GCC_PATH/lib/gcc/${GCC_TOOLCHAIN_ARCH}/<GCC_VERSION>"

if { [uname sysname] != "Darwin" } {
  prepend-path LD_LIBRARY_PATH \$GCC_LIB_PATHS
}

prepend-path PATH                        "\$GCC_PATH/bin"
prepend-path MANPATH                     "\$GCC_PATH/share/man"

setenv       GCC_BIN                     "\$GCC_PATH/bin"
setenv       GCC_LIB                     "\$GCC_LIB_PATHS"
setenv       GCC_MAN                     "\$GCC_PATH/share/man"

EOF
    cd "$PACKAGES_DIR/Modules/<MODULES>/adv_modules"
    if [ -f gcc ]; then rm -f gcc; fi
    ln -s ../modulefiles/moose/.<GCC> gcc
    module load moose/.<GCC>
    cd "$GCC_BIN/../"
    for sfile in `find . -type f -name "*.la"`; do
        if [ `grep -c "$src_temp" $sfile` -ge 1 ]; then
            echo 'editing file: '$sfile
            perl -pi -e "s/-L.\S*build\S*[^'\s+]//g" $sfile
        fi
    done

    # We need to change an rpath for the jit compiler (only for Darwin because
    # Apple has removed the use of DYLD_LIBRARY_PATH)
    if [ `uname` = "Darwin" ]; then
        install_name_tool -id "$PACKAGES_DIR/<GCC>/lib/libgccjit.so" "$PACKAGES_DIR/<GCC>/lib/libgccjit.so"
    fi
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
