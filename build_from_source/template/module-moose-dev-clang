#!/bin/bash
#############
## Specifics
##
DEP=(modules miniconda tbb petsc-default-mpich-clang-opt)
PACKAGE="module-moose-dev-clang"
SERIAL=True

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='false'
EXTRACT='false'
CONFIGURE='false'
BUILD='false'
INSTALL='false'

pre_run() {
    # Remove previous module file
    rm -f "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose-dev-clang"
}

post_run() {
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose-dev-clang"
#%Module1.0#####################################################################
##
## Clang MOOSE DEV Module
##
##
##
conflict moose-dev-clang-alt moose-dev-gcc moose-dev-gcc-alt
module load moose/.<MPICH>_<CLANG>
module load moose/.<PETSC_DEFAULT>_<MPICH>_<CLANG>-opt
module load moose/.<TBB>
module load miniconda

# If MOOSE_DIR is set, help the user out by prepending the moose/python path
if { [ info exists ::env(MOOSE_DIR) ] } {
  eval set [ array get env MOOSE_DIR ]
  if [ file isdirectory "\$MOOSE_DIR/python" ] {
    prepend-path PYTHONPATH "\$MOOSE_DIR/python"
  }
}
EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
