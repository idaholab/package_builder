#!/bin/bash
#############
## Specifics
##
DEP=(modules cmake gcc llvm mpich-clang)
PACKAGE="<MPICH>_<CLANG>-opt"
BASE_DIR="<PETSC_DEFAULT>"

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.inl.gov/source_packages/<PETSC_DEFAULT>.tar.gz'
EXTRACT='<PETSC_DEFAULT>.tar.gz'
CONFIGURE="false"
BUILD='false'
INSTALL='false'

clean_petsc() {
    clean_attempt
    extract
}

pre_run() {
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/<MODULES>/init/bash"
    module load advanced_modules cmake moose/.<MPICH>_<CLANG>
    CONFIGURE="python2 ./configure \
--prefix=$PACKAGES_DIR/$BASE_DIR/$PACKAGE \
--download-hypre=1 \
--with-ssl=0 \
--with-debugging=no \
--with-pic=1 \
--with-shared-libraries=1 \
--with-cc=mpicc \
--with-cxx=mpicxx \
--with-fc=mpif90 \
--download-fblaslapack=1 \
--download-metis=1 \
--download-parmetis=1 \
--download-superlu_dist=1 \
--download-mumps=1 \
--download-scalapack=1 \
-CC=mpicc -CXX=mpicxx -FC=mpif90 -F77=mpif77 -F90=mpif90 \
-CFLAGS='-fPIC -fopenmp' \
-CXXFLAGS='-fPIC -fopenmp' \
-FFLAGS='-fPIC -fopenmp' \
-FCFLAGS='-fPIC -fopenmp' \
-F90FLAGS='-fPIC -fopenmp' \
-F77FLAGS='-fPIC -fopenmp'"

    if [ `uname` = "Darwin" ]; then
	try_command 3 "clean_petsc; configure; make MAKE_NP=$MOOSE_JOBS PETSC_DIR=$1/<PETSC_DEFAULT> PETSC_ARCH=arch-darwin-c-opt all; make PETSC_DIR=$1/<PETSC_DEFAULT> PETSC_ARCH=arch-darwin-c-opt install"
    else
	try_command 3 "clean_petsc; configure; make MAKE_NP=$MOOSE_JOBS PETSC_DIR=$1/<PETSC_DEFAULT> PETSC_ARCH=arch-linux2-c-opt all; make PETSC_DIR=$1/<PETSC_DEFAULT> PETSC_ARCH=arch-linux2-c-opt install"
    fi
    # So we do not run configure a second time
    CONFIGURE="false"
}

post_run() {
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<PETSC_DEFAULT>_<MPICH>_<CLANG>-opt"
#%Module1.0#####################################################################
##
## <MPICH> <CLANG> <PETSC_DEFAULT> optimized superlu modulefile
##
##
##
set         BASE_PATH        "$PACKAGES_DIR"
setenv      PETSC_DIR        "\$BASE_PATH/$BASE_DIR/$PACKAGE"
EOF

    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/civet/mpich-clang-petsc_default_opt"
#%Module1.0#####################################################################
##
## Civet support module
## <PETSC_DEFAULT>
## <CLANG>
## <MPICH>
##
module load moose/.<MPICH>_<CLANG>
module load moose/.<PETSC_DEFAULT>_<MPICH>_<CLANG>-opt
module load moose/.<TBB>
module load moose/.<CPPUNIT>_<CLANG>
module load ccache
module load moose-tools

EOF

    cd "$PACKAGES_DIR/Modules/<MODULES>/mpich_clang"
    ln -s ../modulefiles/moose/.<PETSC_DEFAULT>_<MPICH>_<CLANG>-opt <PETSC_DEFAULT>
}

##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run `pwd`
# configure
# make
# make install
# post_run `pwd`
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
