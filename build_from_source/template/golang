#!/bin/bash
#############
## Specifics
##
DEP=(modules)
PACKAGE="<GOLANG>"
SERIAL=True

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout

if [ `uname` = "Darwin" ]; then
    SUFFIX="darwin-amd64"
else
    SUFFIX="linux-amd64"
fi
DOWNLOAD=(http://mooseframework.inl.gov/source_packages/<GOLANG>.${SUFFIX}.tar.gz)
EXTRACT="false"
CONFIGURE='false'
BUILD='false'
INSTALL='false'

pre_run() {
    cd "$1"
    tar -xf "$DOWNLOAD_DIR/<GOLANG>.${SUFFIX}.tar.gz" -C $PACKAGES_DIR/
    if [ "$?" != "0" ]; then echo "Failed to extract $DOWNLOAD_DIR/<GOLANG>.${SUFFIX}.tar.gz"; cleanup 1; fi
}

post_run() {
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/adv_modules/golang"
#%Module1.0#####################################################################
##
## golang modulefile
##
##
##
set          BASE_PATH         "$PACKAGES_DIR"
prepend-path PATH              "\$BASE_PATH/go/bin"
EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
