#!/bin/bash
#############
## Specifics
##
DEP=(modules)
PACKAGE='miniconda'
SERIAL=True

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
if [ `uname` = "Darwin" ]; then
    DOWNLOAD='http://mooseframework.inl.gov/source_packages/<MINICONDA>-MacOSX-x86_64.sh'
else
    DOWNLOAD='http://mooseframework.inl.gov/source_packages/<MINICONDA>-Linux-x86_64.sh'
fi
EXTRACT='false'
CONFIGURE="false"
BUILD='false'
INSTALL='false'

pre_run() {
    if [ `uname` = "Darwin" ]; then
	bash "$DOWNLOAD_DIR/<MINICONDA>-MacOSX-x86_64.sh" -b -p "$PACKAGES_DIR/$PACKAGE"
	if [ $? -ne 0 ]; then echo "Failed to install $PACKAGE"; cleanup 1; fi
    else
	bash "$DOWNLOAD_DIR/<MINICONDA>-Linux-x86_64.sh" -b -p "$PACKAGES_DIR/$PACKAGE"
	if [ $? -ne 0 ]; then echo "Failed to install $PACKAGE"; cleanup 1; fi
    fi

    export CONDARC="$PACKAGES_DIR/$PACKAGE/.condarc"
    PATH="$PACKAGES_DIR/$PACKAGE/bin:$PATH" conda config --set ssl_verify false
    try_command 5 "PATH=$PACKAGES_DIR/$PACKAGE/bin:$PATH conda update conda --yes"
    try_command 5 "PATH=$PACKAGES_DIR/$PACKAGE/bin:$PATH conda install -c idaholab python=2.7 coverage reportlab mako numpy scipy scikit-learn h5py hdf5 scikit-image requests vtk=7.1.0 pyyaml matplotlib sympy pip lxml pyflakes pandas conda-build mock yaml pyqt=5.9.2 qt=5.9.6 swig anaconda-client setuptools --yes"
    try_command 5 "PATH=$PACKAGES_DIR/$PACKAGE/bin:$PATH conda install -c plotly plotly-orca --yes"
    if [ `uname` = 'Darwin' ]; then
        sed -i '' -e 's/^@deprecated/#@deprecated/' "$PACKAGES_DIR/$PACKAGE/lib/python2.7/site-packages/skimage/measure/_structural_similarity.py"
    else
        sed -i'' -e 's/^@deprecated/#@deprecated/' "$PACKAGES_DIR/$PACKAGE/lib/python2.7/site-packages/skimage/measure/_structural_similarity.py"
    fi
    rm -f "$PACKAGES_DIR/$PACKAGE/.condarc"
}
post_run() {
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/$PACKAGE"
#%Module1.0#####################################################################
##
## $PACKAGE Module
##
##
##
set             BASE_PATH        "$PACKAGES_DIR"

# Miniconda/Peacock
prepend-path    PATH             "\$BASE_PATH/$PACKAGE/bin"
setenv          MPLBACKEND       qt5Agg
EOF
    # Fix swig3.0 being detected outside miniconda's path (Debian stretch causes LLVM to fail due to using system swig3.0 over swig)
    if [ "`PATH="$PACKAGES_DIR/$PACKAGE/bin:$PATH" which swig3.0`" != "$PACKAGES_DIR/$PACKAGE/bin/swig3.0" ] && [ -f "$PACKAGES_DIR/$PACKAGE/bin/swig" ]; then
        cd "$PACKAGES_DIR/$PACKAGE/bin"
        ln -s swig swig3.0
    fi
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
source "$RELATIVE_DIR/functions" $@
