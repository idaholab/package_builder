#!/bin/bash
#############
## Specifics
##
DEP=(modules llvm)
PACKAGE='cppunit-clang'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.org/source_packages/<CPPUNIT>.tar.gz'
EXTRACT='<CPPUNIT>.tar.gz'
CONFIGURE='false'
BUILD='true'
INSTALL='true'

pre_run() {
    if [ -d $PACKAGES_DIR/<CPPUNIT>/clang-opt ]; then
	rm -rf $PACKAGES_DIR/<CPPUNIT>/clang-opt
    fi
    unset MODULEPATH
    source $PACKAGES_DIR/Modules/<MODULES>/init/bash
    module load advanced_modules clang
    # we have to run this our selves with out error checking. Mac machines appear to exhibit a bug:
    #
    # rm: conftest.dSYS: is a directory
    #
    # autoconf tries to `rm -f` a directory (which requires an additional -r switch) that appears to only be created on Mac machines.
    if [ `uname` = "Darwin" ]; then
	./configure --prefix=$PACKAGES_DIR/<CPPUNIT>/clang-opt
    else
	./configure --prefix=$PACKAGES_DIR/<CPPUNIT>/clang-opt
	if [ $? -ne 0 ]; then echo "Error while configuring cppunit"; cleanup 1; fi
    fi
}

post_run() {
    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<CPPUNIT>-clang
#%Module1.0#####################################################################
##
## CPPUnit Clang 
##
set          BASE_PATH         $PACKAGES_DIR

set          CPPUNIT_PATH      \$BASE_PATH/<CPPUNIT>/clang-opt
setenv       CPPUNIT_DIR       \$CPPUNIT_PATH

if { [uname sysname] != "Darwin" } {
  prepend-path LD_LIBRARY_PATH  \$CPPUNIT_PATH/lib
}

prepend-path INCLUDE                     \$CPPUNIT_PATH/include
prepend-path PATH                        \$CPPUNIT_PATH/bin
EOF
    cd $PACKAGES_DIR/Modules/<MODULES>/adv_modules
    ln -s ../modulefiles/moose/.<CPPUNIT>-clang cppunit-clang
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
