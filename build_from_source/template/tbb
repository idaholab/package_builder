#!/bin/bash
#############
## Specifics
##
DEP=(modules)
PACKAGE='tbb'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.org/source_packages/<TBB>oss_src.tgz'
EXTRACT='<TBB>oss_src.tgz'
CONFIGURE='false'
BUILD='true'
INSTALL='false'

pre_run() {
    if [ -d $PACKAGES_DIR/$PACKAGE ]; then
	rm -rf $PACKAGES_DIR/$PACKAGE
    fi
    return
}

post_run() {
    mkdir -p $PACKAGES_DIR/tbb/lib
    cp -R include $PACKAGES_DIR/tbb
    if [ `uname` = "Darwin" ]; then
	cp build/macos_*_release/*.dylib $PACKAGES_DIR/tbb/lib
    else
	cp build/linux_*_release/*.so* $PACKAGES_DIR/tbb/lib
    fi
    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<TBB>
#%Module1.0#####################################################################
##
## TBB modulefile
##
##
##
set    BASE_DIR                $PACKAGES_DIR

setenv TBB_DIR                 \$BASE_DIR/tbb
setenv TBBROOT                 \$BASE_DIR/tbb

prepend-path CPATH             \$BASE_DIR/tbb/include

if { [uname sysname] == "Darwin" } {
  prepend-path LIBRARY           \$BASE_DIR/tbb/lib
} else {
  prepend-path LIBRARY_PATH      \$BASE_DIR/tbb/lib
  prepend-path LD_LIBRARY_PATH   \$BASE_DIR/tbb/lib
}
EOF
    cd $PACKAGES_DIR/Modules/<MODULES>/adv_modules
    ln -s ../modulefiles/moose/.<TBB> tbb
    if [ `uname` = "Darwin" ]; then
	cat <<'EOF' > $PACKAGES_DIR/${PACKAGE}/lib/change_links.sh
#!/bin/bash
for sfile in `ls | grep dylib`; do
  if ! [ -L $sfile ]; then
    if [ `otool -L $sfile | grep -c rpath` -ge 1 ]; then 
      rpaths=($(otool -L $sfile | grep rpath | cut -f 1 -d\  ))
      echo "Changing id: `pwd`/$sfile"
      install_name_tool -id `pwd`/$sfile `pwd`/$sfile
      for link in ${rpaths[*]}; do
        echo "$link $sfile"
        if [ `echo $link | grep -c $sfile` -le 0 ]; then
          orig_link=$link
          fixed_link=$(echo $link | sed -e 's?@rpath?'`pwd`'?g')
          echo "install_name_tool -change $orig_link $fixed_link $sfile"
          install_name_tool -change $orig_link $fixed_link $sfile
        fi
      done
    fi
  fi
done
EOF
	cd $PACKAGES_DIR/${PACKAGE}/lib/
	sh change_links.sh
	rm -f change_links.sh
    fi
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
