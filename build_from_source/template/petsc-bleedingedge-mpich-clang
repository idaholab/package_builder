#!/bin/bash
#############
## Specifics
##
DEP=(modules cmake gcc llvm mpich-clang)
PACKAGE='<PETSC_BLEEDINGEDGE>-mpich-clang'
SERIAL=True

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='false'
EXTRACT='false'
CONFIGURE="false"
BUILD='false'
INSTALL='false'

clean_petsc() {
    if [ -d $PACKAGES_DIR/petsc/mpich_<PETSC_BLEEDINGEDGE>/clang-opt-superlu ]; then
	rm -rf $PACKAGES_DIR/petsc/mpich_<PETSC_BLEEDINGEDGE>/clang-opt-superlu
    fi
    cd "$src_temp"
    if [ -d <PETSC_BLEEDINGEDGE> ]; then
        rm -rf <PETSC_BLEEDINGEDGE>
    fi
    echo -e "Current working directory"`pwd`
    git clone -b maint https://bitbucket.org/petsc/petsc <PETSC_BLEEDINGEDGE>
    cd <PETSC_BLEEDINGEDGE>
}

pre_run() {
    unset MODULEPATH
    source $PACKAGES_DIR/Modules/<MODULES>/init/bash
    module load advanced_modules cmake mpich-clang
    CONFIGURE="./configure \
--prefix=$PACKAGES_DIR/petsc/mpich_<PETSC_BLEEDINGEDGE>/clang-opt-superlu \
--download-hypre=git://https://github.com/fdkong/hypre.git --download-hypre-commit=HEAD \
--with-ssl=0 \
--with-debugging=no \
--with-pic=1 \
--with-shared-libraries=1 \
--with-cc=mpicc \
--with-cxx=mpicxx \
--with-fc=mpif90 \
--download-fblaslapack=1 \
--download-metis=1 \
--download-parmetis=1 \
--download-superlu_dist=1 \
--download-mumps=1 \
--download-scalapack=1 \
-CC=mpicc -CXX=mpicxx -FC=mpif90 -F77=mpif77 -F90=mpif90 \
-CFLAGS='-fPIC -fopenmp' \
-CXXFLAGS='-fPIC -fopenmp' \
-FFLAGS='-fPIC -fopenmp' \
-FCFLAGS='-fPIC -fopenmp' \
-F90FLAGS='-fPIC -fopenmp' \
-F77FLAGS='-fPIC -fopenmp'"

    if [ `uname` = "Darwin" ]; then
	try_command 3 "clean_petsc; configure; make MAKE_NP=1 PETSC_DIR=$1/<PETSC_BLEEDINGEDGE> PETSC_ARCH=arch-darwin-c-opt all; make PETSC_DIR=$1/<PETSC_BLEEDINGEDGE> PETSC_ARCH=arch-darwin-c-opt install"
    else
	try_command 3 "clean_petsc; configure; make MAKE_NP=1 PETSC_DIR=$1/<PETSC_BLEEDINGEDGE> PETSC_ARCH=arch-linux2-c-opt all; make PETSC_DIR=$1/<PETSC_BLEEDINGEDGE> PETSC_ARCH=arch-linux2-c-opt install"
    fi
    # So we do not run configure a second time
    CONFIGURE="false"
}

post_run() {
    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.mpich_<PETSC_BLEEDINGEDGE>-clang
#%Module1.0#####################################################################
##
## MPICH Clang <PETSC_BLEEDINGEDGE> superlu modulefile
##
##
##
set         BASE_PATH        $PACKAGES_DIR
setenv      PETSC_DIR        \$BASE_PATH/petsc/mpich_<PETSC_BLEEDINGEDGE>/clang-opt-superlu
EOF
    cd $PACKAGES_DIR/Modules/<MODULES>/mpich_clang
    ln -s ../modulefiles/moose/.mpich_<PETSC_BLEEDINGEDGE>-clang <PETSC_BLEEDINGEDGE>
}

##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run `pwd`
# configure
# make
# make install
# post_run `pwd`
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
