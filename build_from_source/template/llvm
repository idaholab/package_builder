#!/bin/bash
#############
## Specifics
##
DEP=(modules miniconda cmake gcc)
PACKAGE="llvm-<LLVM>"
NO_CCACHE='true'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='false'
EXTRACT='false'
CONFIGURE='false'
BUILD='true'
INSTALL='true'

pre_run() {
    if [ -d "$PACKAGES_DIR/$PACKAGE" ]; then rm -rf "$PACKAGES_DIR/$PACKAGE"; fi
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/init/bash"
    module load advanced_modules miniconda cmake
    git clone git@github.com:llvm/llvm-project.git
    cd llvm-project
    git checkout llvmorg-<LLVM>
    if [ $? -ne 0 ]; then echo 'Failed to clone LLVM project'; cleanup 1; fi
    mkdir "$1/llvm-build"; cd "$1/llvm-build"

    if [ `uname` = "Darwin" ]; then
        # NOTE: In order for code-signing to work, the administrator of said build machines must first
        # execute ../llvm-project/lldb/scripts/macos-setup-codesign.sh (be sure to modify script to name
        # certificate to: moose-codesign)
        cmake -G "Unix Makefiles" \
              -DCMAKE_INSTALL_PREFIX="$PACKAGES_DIR/$PACKAGE" \
              -DLLVM_ENABLE_PROJECTS="clang;lldb;libcxx;libcxxabi;openmp;clang-tools-extra;lld;compiler-rt" \
              -DCMAKE_INSTALL_NAME_DIR:STRING="$PACKAGES_DIR/$PACKAGE/lib" \
              -DCMAKE_INSTALL_RPATH:STRING="$PACKAGES_DIR/$PACKAGE/lib" \
              -DCMAKE_MACOSX_RPATH:BOOL=ON \
              -DLLDB_CODESIGN_IDENTITY="moose_codesign" \
              -DPYTHON_EXECUTABLE=`which python3` \
              -DDEFAULT_SYSROOT=`xcrun --show-sdk-path` \
              -DCMAKE_BUILD_TYPE="Release" \
              -Wno-dev \
              ../llvm-project/llvm

    else
        module load gcc
        CC=gcc CXX=g++ cmake -DCMAKE_INSTALL_PREFIX="$PACKAGES_DIR/$PACKAGE" \
          -DCMAKE_C_COMPILER="$PACKAGES_DIR/<GCC>/bin/gcc" \
          -DLLVM_ENABLE_PROJECTS="clang;lldb;libcxx;libcxxabi;openmp;clang-tools-extra;lld;compiler-rt" \
          -DCMAKE_CXX_COMPILER="$PACKAGES_DIR/<GCC>/bin/g++" \
          -DGCC_INSTALL_PREFIX="$PACKAGES_DIR/<GCC>" \
          -DCMAKE_CXX_LINK_FLAGS="-L$PACKAGES_DIR/<GCC>/lib64 -Wl,-rpath,$PACKAGES_DIR/<GCC>/lib64" \
          -DCMAKE_INSTALL_RPATH:STRING="$PACKAGES_DIR/$PACKAGE/lib" \
          -DCMAKE_BUILD_WITH_INSTALL_RPATH=1 \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DLLVM_ENABLE_RTTI=ON \
          -DCMAKE_BUILD_TYPE="Release" \
          -DPYTHON_EXECUTABLE=`which python3` \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -Wno-dev \
          ../llvm-project/llvm
    fi
    if [ "$?" != "0" ]; then echo "Failed to configure LLVM"; cleanup 1; fi
}

post_run() {
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<CLANG>"
#%Module1.0#####################################################################
##
## <CLANG> modulefile
##
##
##
set             BASE_PATH          "$PACKAGES_DIR"

module load moose/.<GCC>

if { [uname sysname] != "Darwin" } {
  if { ! [ info exists ::env(OMP_NUM_THREADS) ] } {
    setenv          OMP_NUM_THREADS               1
    # we need to be stateful somehow
    setenv          MOOSE_OMP                     True
  }
  if { [ module-info mode remove ] } {
    if { [ info exists ::env(MOOSE_OMP) ] } {
      unsetenv        OMP_NUM_THREADS
      unsetenv        MOOSE_OMP
    }
  }
  prepend-path    LD_LIBRARY_PATH               "\$BASE_PATH/$PACKAGE/lib"
}

prepend-path    PATH                          "\$BASE_PATH/$PACKAGE/bin"
prepend-path    LIBRARY_PATH                  "\$BASE_PATH/$PACKAGE/lib"

# Needed for Python Clang bindings
# >>> clang.cindex.Config.set_library_path(os.getenv('MOOSE_CLANG_LIB'))
prepend-path    PYTHONPATH                    "\$BASE_PATH/$PACKAGE/bindings/python"
setenv          MOOSE_CLANG_LIB               "\$BASE_PATH/$PACKAGE/lib"

setenv          CC                            clang
setenv          CXX                           clang++
EOF
    cd "$PACKAGES_DIR/Modules/<MODULES>/adv_modules"
    if [ -f clang ]; then
        rm -f clang
    fi
    ln -s ../modulefiles/moose/.<CLANG> clang
    cp -R "$1/llvm-project/llvm/clang/bindings" "$PACKAGES_DIR/$PACKAGE/"

    # Create link to clang-format lisp
    cd "$PACKAGES_DIR"; ln -s "$PACKAGES_DIR/$PACKAGE/share/clang/clang-format.el" .

    if [ `uname` = "Darwin" ]; then
        # This is not the python we originally found during cmake configure. So change it back!
        PYVERSION=$(python3 -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')
        cd "$PACKAGES_DIR/$PACKAGE/lib"
        for rfile in `ls`; do
            install_name_tool -change "@rpath/libpython${PYVERSION}m.dylib" "$PACKAGES_DIR/miniconda/lib/libpython${PYVERSION}m.dylib" "$rfile"
        done
        cd "$PACKAGES_DIR/$PACKAGE/bin"
        for rfile in `ls`; do
            install_name_tool -change "@rpath/libpython${PYVERSION}m.dylib" "$PACKAGES_DIR/miniconda/lib/libpython${PYVERSION}m.dylib" "$rfile"
        done

        # check if we are code signing LLDB
        if [ "$CODESIGN_NAME" = "" ]; then
            CODESIGN_NAME=''
        else
            mkdir -p "$PACKAGES_DIR/$PACKAGE/codesign"
            cp "$CODESIGN_CERT" "$PACKAGES_DIR/$PACKAGE/codesign/moose_codesign.cert"
            echo "$CODESIGN_NAME" > "$PACKAGES_DIR/$PACKAGE/codesign/codesign_name"
        fi
    else
        # Create link to drop-in replacement lld (does not yet work on Darwin machines)
        cd "$PACKAGES_DIR/$PACKAGE/bin"; ln -s lld ld
    fi
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
CODESIGN_NAME="<CODESIGN_NAME>"
CODESIGN_CERT="<CODESIGN_CERT>"
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
