#!/bin/bash
#############
## Specifics
##
DEP=(modules miniconda cmake gcc)
PACKAGE="llvm-<LLVM>"
NO_CCACHE='true'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD=(http://mooseframework.inl.gov/source_packages/llvm-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/cfe-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/clang-tools-extra-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/compiler-rt-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/lld-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/libcxx-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/libcxxabi-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/openmp-<LLVM>.src.tar.xz http://mooseframework.inl.gov/source_packages/lldb-<LLVM>.src.tar.xz)
EXTRACT="false"
CONFIGURE="false"
BUILD='true'
INSTALL='true'

change_links() {
    # If on darwin, search for every dylib in working directory, and alter the
    # rpath for an absolute path, if rpath is a relative path
    if [ `uname` = "Darwin" ]; then
        cat <<'EOF' > "change_links.sh"
#!/bin/bash
for sfile in `ls | grep dylib`; do
  if ! [ -L $sfile ]; then
    if [ `otool -L $sfile | grep -c rpath` -ge 1 ]; then
      rpaths=($(otool -L $sfile | grep rpath | cut -f 1 -d\  ))
      echo "Changing id: `pwd`/$sfile"
      install_name_tool -id `pwd`/$sfile `pwd`/$sfile
      for link in ${rpaths[*]}; do
        echo "$link $sfile"
        if [ `echo $link | grep -c $sfile` -le 0 ]; then
          orig_link=$link
          fixed_link=$(echo $link | sed -e 's?@rpath?'`pwd`'?g')
          echo "install_name_tool -change $orig_link $fixed_link $sfile"
          install_name_tool -change $orig_link $fixed_link $sfile
        fi
      done
    fi
  fi
done
EOF
          sh change_links.sh
          rm -f change_links.sh
    fi
}

custom_extract()
{
    for LLVM_PACKAGE in ${LLVM_PACKAGES[*]}; do
      tar -xf "$DOWNLOAD_DIR/$LLVM_PACKAGE-<LLVM>.src.tar.xz" -C .
      if [ $? -ne 0 ]; then echo 'Failed to extract '$LLVM_PACKAGE; cleanup 1; fi
      if [ $LLVM_PACKAGE = 'cfe' ]; then
          mv $LLVM_PACKAGE-<LLVM>.src llvm/tools/clang
      elif [ $LLVM_PACKAGE = 'lld' ]; then
          mv $LLVM_PACKAGE-<LLVM>.src llvm/tools/lld
      elif [ $LLVM_PACKAGE = 'lldb' ]; then
          mv $LLVM_PACKAGE-<LLVM>.src llvm/tools/lldb
      elif [ $LLVM_PACKAGE = 'clang-tools-extra' ]; then
          mv $LLVM_PACKAGE-<LLVM>.src llvm/tools/clang/tools/extra
      elif [ $LLVM_PACKAGE = 'llvm' ]; then
          mv $LLVM_PACKAGE-<LLVM>.src $LLVM_PACKAGE
      else
          mv $LLVM_PACKAGE-<LLVM>.src llvm/projects/$LLVM_PACKAGE
      fi
    done
}

build_bootstrapper()
{
    # For now, we are only interested in building the bootstrapper for Darwin machines
    if [ `uname` != 'Darwin' ]; then return; fi

    # Build bootstrap-clang
    mkdir "$1/boot_clang"; cd "$1/boot_clang"
    if [ `uname` = "Darwin" ]; then
        LLVM_PACKAGES=(llvm cfe libcxx libcxxabi)
        CC=clang CXX=clang++
    else
        LLVM_PACKAGES=(llvm cfe)
        CC=gcc CXX=g++
    fi
    custom_extract
    mkdir build; cd build
    CC=$CC CXX=$CXX cmake -DCMAKE_INSTALL_PREFIX="$1/clang-bootstrap" \
          -DCMAKE_BUILD_TYPE="Release" \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -DBUILD_SHARED_LIBS="ON" \
          -Wno-dev \
          ../llvm
    if [ $? -ne 0 ]; then echo 'Failed to configure llvm/clang bootstrap'; cleanup 1; fi
    make -j $MOOSE_JOBS
    if [ $? -ne 0 ]; then echo 'Failed to build llvm/clang bootstrap'; cleanup 1; fi
    make install
    if [ $? -ne 0 ]; then echo 'Failed to install llvm/clang bootstrap'; cleanup 1; fi
    export PATH="$1/clang-bootstrap/bin:$PATH"

    # bootstrapper Post-install
    if [ `uname` = "Darwin" ]; then
        cd "$1/clang-bootstrap/lib"
        change_links
    else
        export LD_LIBRARY_PATH="$1/clang-bootstrap/lib:$LD_LIBRARY_PATH"
    fi

    # Build bootstrap-libc++ libraries
    if [ `uname` = "Linux" ]; then
        mkdir "$1/boot_libcxx"; cd "$1/boot_libcxx"
        LLVM_PACKAGES=(llvm libcxx libcxxabi)
        custom_extract
        mkdir build; cd build
        CC=clang CXX=clang++ cmake -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE="Release" \
          -DCMAKE_INSTALL_PREFIX="$1/clang-bootstrap" \
          -Wno-dev \
          ../llvm/projects/libcxx
        if [ $? -ne 0 ]; then echo 'Failed to configure llvm/libcxx bootstrap'; cleanup 1; fi
        make -j $MOOSE_JOBS
        if [ $? -ne 0 ]; then echo 'Failed to build llvm/libcxx bootstrap'; cleanup 1; fi
        make install -j $MOOSE_JOBS
        # Clean libcxx cmake config and re-config/re-build for libcxxabi
        rm -rf "$1/boot_libcxx/build/"*
        CC=clang CXX=clang++ cmake -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE="Release" \
          -DCMAKE_INSTALL_PREFIX="$1/clang-bootstrap" \
          -Wno-dev \
          ../llvm/projects/libcxxabi
        if [ $? -ne 0 ]; then echo 'Failed to configure llvm/libcxxabi bootstrap'; cleanup 1; fi
        make -j $MOOSE_JOBS
        if [ $? -ne 0 ]; then echo 'Failed to build llvm/libcxxabi bootstrap'; cleanup 1; fi
        make install -j $MOOSE_JOBS
    fi
}

pre_run() {
    unset MODULEPATH
    source "$PACKAGES_DIR/Modules/<MODULES>/init/bash"
    module load advanced_modules cmake gcc

    # Build the necessary clang bootstrapper required to build the entire LLVM project
    build_bootstrapper "$1"

    # !!! NOTE: Order is important !!!
    # Extract/Move LLVM, Clang, LLDB, Clang-Extras, compiler-rt, libcxx/abi, openmp
    cd "$1"
    LLVM_PACKAGES=(llvm cfe lld lldb clang-tools-extra compiler-rt libcxx libcxxabi openmp)
    custom_extract

    module load miniconda

    mkdir "$1/build"; cd "$1/build"
    if [ `uname` != "Darwin" ]; then
        export CC=gcc; export CXX=g++
        cmake -DCMAKE_C_COMPILER="$PACKAGES_DIR/<GCC>/bin/gcc" \
          -DCMAKE_CXX_COMPILER="$PACKAGES_DIR/<GCC>/bin/g++" \
          -DGCC_INSTALL_PREFIX="$PACKAGES_DIR/<GCC>" \
          -DCMAKE_CXX_LINK_FLAGS="-L$PACKAGES_DIR/<GCC>/lib64 -Wl,-rpath,$PACKAGES_DIR/<GCC>/lib64" \
          -DCMAKE_INSTALL_PREFIX="$PACKAGES_DIR/$PACKAGE" \
          -DCMAKE_INSTALL_RPATH:STRING="$PACKAGES_DIR/$PACKAGE/lib" \
          -DCMAKE_BUILD_WITH_INSTALL_RPATH=1 \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DLLVM_ENABLE_RTTI=ON \
          -DCMAKE_BUILD_TYPE="Release" \
          -DPYTHON_EXECUTABLE=`which python2.7` \
          -DLLDB_DISABLE_PYTHON=0 \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -Wno-dev \
          ../llvm
    else
        # check if we are code signing LLDB
        if [ "$CODESIGN_NAME" = "None" ]; then
            CODESIGN_NAME=''
        else
            mkdir -p "$PACKAGES_DIR/$PACKAGE/codesign"
            cp "$CODESIGN_CERT" "$PACKAGES_DIR/$PACKAGE/codesign/moose_codesign.cert"
            echo "$CODESIGN_NAME" > "$PACKAGES_DIR/$PACKAGE/codesign/codesign_name"
        fi
        CC=clang CXX=clang++ cmake -DCMAKE_INSTALL_PREFIX="$PACKAGES_DIR/$PACKAGE" \
          -DLLVM_BUILD_EXTERNAL_COMPILER_RT="ON" \
          -DLLDB_CODESIGN_IDENTITY=$CODESIGN_NAME \
          -DLLVM_ENABLE_CXX1Y="ON" \
          -DCLANG_DEFAULT_CXX_STDLIB="libc++" \
          -DLIBCXXABI_USE_COMPILER_RT="ON" \
          -DLLVM_ENABLE_LIBCXX="ON" \
          -DLLDB_DISABLE_PYTHON="0" \
          -DLLVM_ENABLE_RTTI="ON" \
          -DCLANG_DEFAULT_OPENMP_RUNTIME="libomp" \
          -DPYTHON_EXECUTABLE=`which python2.7` \
          -DCMAKE_BUILD_TYPE="Release" \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -Wno-dev \
          ../llvm
    fi
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.<CLANG>"
#%Module1.0#####################################################################
##
## <CLANG> modulefile
##
##
##
set             BASE_PATH          "$PACKAGES_DIR"

module load moose/.<GCC>

if { [uname sysname] != "Darwin" } {
  if { ! [ info exists ::env(OMP_NUM_THREADS) ] } {
    setenv          OMP_NUM_THREADS               1
    # we need to be stateful somehow
    setenv          MOOSE_OMP                     True
  }
  if { [ module-info mode remove ] } {
    if { [ info exists ::env(MOOSE_OMP) ] } {
      unsetenv        OMP_NUM_THREADS
      unsetenv        MOOSE_OMP
    }
  }
  prepend-path    LD_LIBRARY_PATH               "\$BASE_PATH/$PACKAGE/lib"
}

prepend-path    PATH                          "\$BASE_PATH/$PACKAGE/bin"
prepend-path    LIBRARY_PATH                  "\$BASE_PATH/$PACKAGE/lib"

# Needed for Python Clang bindings
# >>> clang.cindex.Config.set_library_path(os.getenv('MOOSE_CLANG_LIB'))
prepend-path    PYTHONPATH                    "\$BASE_PATH/$PACKAGE/bindings/python"
setenv          MOOSE_CLANG_LIB               "\$BASE_PATH/$PACKAGE/lib"

setenv          CC                            clang
setenv          CXX                           clang++
EOF
}

post_run() {
    cd "$PACKAGES_DIR/Modules/<MODULES>/adv_modules"
    if [ -f clang ]; then
        rm -f clang
    fi
    ln -s ../modulefiles/moose/.<CLANG> clang
    cd "$PACKAGES_DIR/$PACKAGE/lib"
    change_links
    cp -R "$1/llvm/tools/clang/bindings" "$PACKAGES_DIR/$PACKAGE/"

    # We have to fix serveral things either Cmake or LLDB is doing wrong when building on Darwin machines
    if [ `uname` = "Darwin" ]; then
        # This is not the python we originally found during cmake configure. So change it back!
        install_name_tool -change "$PACKAGES_DIR/$PACKAGE/lib/libpython2.7.dylib" "$PACKAGES_DIR/miniconda/lib/libpython2.7.dylib" liblldb.<LLVM>.dylib
        if [ "$?" != "0" ]; then echo "Failed to fix libpython link in liblldb.dylib"; cleanup 1; fi

        # The default entitlement being applied to the `debugserver` causes the binary to simply die "-9" when executed (on Mojave).
        if [ "$CODESIGN_NAME" = "" ]; then
            codesign -f -s - "$PACKAGES_DIR/$PACKAGE/bin/debugserver"
        else
            codesign -f -s "$CODESIGN_NAME" "$PACKAGES_DIR/$PACKAGE/bin/debugserver"
        fi
        if [ "$?" != "0" ]; then echo "Failed to remove Entitlements from debugserver"; cleanup 1; fi
    fi

    # Create link to clang-format lisp
    cd "$PACKAGES_DIR"; ln -s "$PACKAGES_DIR/$PACKAGE/share/clang/clang-format.el" .

    # Create link to drop-in replacement lld
    cd "$PACKAGES_DIR/$PACKAGE/bin"; ln -s lld ld
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
CODESIGN_NAME="<CODESIGN_NAME>"
CODESIGN_CERT="<CODESIGN_CERT>"
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
