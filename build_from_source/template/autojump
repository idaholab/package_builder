#!/bin/bash
#############
## Specifics
##
DEP=(moose_profile)
PACKAGE='autojump'
SERIAL=True

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='false'
EXTRACT='false'
CONFIGURE="false"
BUILD='false'
INSTALL='false'

pre_run() {
    cd $1
    try_command 3 "git clone https://github.com/joelthelion/autojump.git"
    cd autojump
    if [ $? -ne 0 ]; then echo 'Failed to clone autojump repo'; cleanup 1; fi
    git checkout 06e082c91805cb022900819b2e0881eeae780d58
    ./install.py -f -d "$PACKAGES_DIR/$PACKAGE" -p "$PACKAGES_DIR/$PACKAGE"
    if [ $? -ne 0 ]; then echo 'Failed to install autojump'; cleanup 1; fi
}
post_run() {
    cat <<EOF > "$PACKAGES_DIR/environments/autojump_profile"
if [ -f "$PACKAGES_DIR/autojump/share/autojump/autojump.\${MY_SHELL}" ]; then
  export PATH="$PACKAGES_DIR/autojump/bin":\$PATH
  export MANPATH="$PACKAGES_DIR/autojump/share/man:"\$MANPATH
  source "$PACKAGES_DIR/autojump/share/autojump/autojump.\${MY_SHELL}"
else
  printf "Your current shell \${MY_SHELL}, is not supported by autojump\n"
fi
EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup 0|1  (exit return code)

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
DOWNLOAD_ONLY=<DOWNLOAD_ONLY>
source "$RELATIVE_DIR/functions" $@
